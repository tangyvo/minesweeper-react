{"version":3,"sources":["Components/Styles/StyleMenu.js","Components/Styles/StyleBody.js","Components/Styles/StyleGame.js","Components/Styles/StyleCell.js","Components/Cell.jsx","Components/Game.jsx","Components/Level.jsx","Components/Flags.jsx","Components/Timer.jsx","Components/Styles/StyleGameOver.js","Components/GameOver.jsx","Components/BestTime.jsx","App.js","index.js"],"names":["StyleMenu","styled","div","StyleBody","StyleGame","props","level","StyleCell","isClicked","index","neighbourBombs","React","memo","isBomb","singleClick","gameOver","x","y","isFlagged","rightClick","touchStart","touchEnd","onTouchStart","onTouchEnd","onClick","console","log","grid","map","row","col","key","Level","levelChange","onChange","value","Flags","flagTotal","role","aria-label","Timer","timer","className","StyleGameOver","GameOver","gameWon","reset","bestTime","App","useState","setLevel","setGrid","bombs","setBombs","bombCount","clickCount","setClickCount","setGameOver","setGameWon","setTimer","isPlaying","setIsPlaying","setFlagTotal","isBombsAdded","setIsBombsAdded","revealMultiple","setRevealMultiple","showCells","setShowCells","setBestTime","longPress","setLongPress","useEffect","localStorage","getItem","countDown","setInterval","setItem","prev","clearInterval","updateGrid","addNeighourBombCount","calcBomb","bombArr","totalBlocks","length","randIndex","Math","floor","random","includes","push","gridCopy","addFlag","JSON","parse","stringify","checkGameOver","displayMultiple","yArr","xArr","j","i","forEach","a","notClickedCount","numBombs","calcNeighbourBombs","e","target","persist","button","preventDefault","time","Date","getTime","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oyBAEO,IAAMA,EAAYC,IAAOC,IAAV,K,iJCAf,IAAMC,EAAYF,IAAOC,IAAV,K,mSCAf,IAAME,EAAYH,IAAOC,IAAV,KAEc,SAAAG,GAAK,OAAIA,EAAMC,SAClB,SAAAD,GAAK,OAAIA,EAAMC,S,iTCHzC,IAAMC,EAAYN,IAAOC,IAAV,KAIA,SAACG,GAAD,OAClBA,EAAMG,WAAaH,EAAMI,MAAQ,IAAM,EACnC,UACAJ,EAAMG,WAAaH,EAAMI,MAAQ,IAAM,EACvC,UACAJ,EAAMI,MAAQ,IAAM,EACpB,UACA,aACI,SAACJ,GAAD,OACiB,IAAzBA,EAAMK,eACF,OACyB,IAAzBL,EAAMK,eACN,QACyB,IAAzBL,EAAMK,eACN,MACyB,IAAzBL,EAAMK,eACN,SACyB,IAAzBL,EAAMK,eACN,SACyB,IAAzBL,EAAMK,eACN,QACA,YAKS,SAACL,GAAD,MACK,OAAhBA,EAAMC,MAAN,QAEoB,OAAhBD,EAAMC,MACN,OACA,YCUKK,MAAMC,MAxCR,SAAC,GAcP,IAbLH,EAaI,EAbJA,MACAI,EAYI,EAZJA,OACAP,EAWI,EAXJA,MACAE,EAUI,EAVJA,UACAM,EASI,EATJA,YACAC,EAQI,EARJA,SACAC,EAOI,EAPJA,EACAC,EAMI,EANJA,EACAP,EAKI,EALJA,eAEAQ,GAGI,EAJJC,WAII,EAHJD,WACAE,EAEI,EAFJA,WACAC,EACI,EADJA,SAEA,OACE,kBAACd,EAAD,CACED,MAAOA,EACPE,UAAWA,EACXc,aAAcF,EACdG,WAAY,kBAAMF,EAASJ,EAAGD,IAE9BP,MAAOA,EACPe,QAAS,kBAAMV,EAAYG,EAAGD,IAC9BN,eAAgBA,GAEfe,QAAQC,IAAI,aACb,6BACGb,GAAUE,EACP,eACAG,EACA,eACmB,IAAnBR,GAAwBF,EACxBE,EACA,QCPGC,MAAMC,MA5BR,SAAC,GAA8E,IAA5Ee,EAA2E,EAA3EA,KAAMrB,EAAqE,EAArEA,MAAOQ,EAA8D,EAA9DA,YAAaC,EAAiD,EAAjDA,SAAUI,EAAuC,EAAvCA,WAAYC,EAA2B,EAA3BA,WAAYC,EAAe,EAAfA,SAC1E,OACE,kBAACjB,EAAD,CAAWE,MAAOA,GAEfqB,EAAKC,KAAI,SAACC,GAAD,OACRA,EAAID,KAAI,SAACE,GAAD,OACN,kBAAC,EAAD,CACEC,IAAKD,EAAIrB,MACTA,MAAOqB,EAAIrB,MACXI,OAAQiB,EAAIjB,OACZK,UAAWY,EAAIZ,UACfR,eAAgBoB,EAAIpB,eACpBM,EAAGc,EAAId,EACPC,EAAGa,EAAIb,EACPT,UAAWsB,EAAItB,UACfF,MAAOA,EACPQ,YAAaA,EACbC,SAAUA,EACVI,WAAYA,EACZC,WAAYA,EACZC,SAAUA,cCZPW,EAZD,SAAC,GAA4B,IAA1B1B,EAAyB,EAAzBA,MAAO2B,EAAkB,EAAlBA,YACtB,OACE,oCACE,4BAAQC,SAAUD,EAAaE,MAAO7B,GACpC,4BAAQ6B,MAAM,KAAd,QACA,4BAAQA,MAAM,MAAd,UACA,4BAAQA,MAAM,MAAd,WCGOC,EATD,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACf,OACE,2BACE,0BAAMC,KAAK,MAAMC,aAAW,QAA5B,gBACCF,ICYQG,EAhBD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACf,OACE,2BACE,0BAAMC,UAAU,QAAQJ,KAAK,MAAMC,aAAW,SAA9C,iBAEW,IAAVE,EACG,MACAA,EAAQ,GACR,KAAOA,EAAQ,IACfA,EAAQ,IACR,IAAMA,EAAQ,IACdA,I,oqBCXH,IAAME,EAAgB1C,IAAOC,IAAV,KCuBX0C,EArBE,SAAC,GAAkC,IAAhC7B,EAA+B,EAA/BA,SAAU8B,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MACrC,OACE,oCACG/B,EACC,kBAAC4B,EAAD,KACE,yCACA,4BAAQnB,QAASsB,GAAjB,eAGFD,EACE,kBAACF,EAAD,KACE,0CACA,4BAAQnB,QAASsB,GAAjB,eAGJ,KCSOnC,MAAMC,MAvBJ,SAAC,GAAD,IAAGmC,EAAH,EAAGA,SAAH,OACf,uBAAGL,UAAU,aACVjB,QAAQC,IAAI,kBACb,0BAAMa,aAAW,QAAQD,KAAK,OAA9B,eACK,KAHP,aAMgB,IAAbS,GAA+B,OAAbA,EAAlB,OAEGA,EAAW,GAAX,aACMA,EADN,KAEAA,EAAW,IAAX,YACKA,EADL,gBAEIA,GACR,kBAAC,cAAD,KACE,+DAEF,kBAAC,aAAD,KACE,kEC2SSC,EAhTH,WAAO,IAAD,EACUC,mBAAS,GADnB,mBACT3C,EADS,KACF4C,EADE,OAEQD,mBAAS,IAFjB,mBAETtB,EAFS,KAEHwB,EAFG,OAGUF,mBAAS,IAHnB,mBAGTG,EAHS,KAGFC,EAHE,KAIZC,EAAoB,EAARhD,EAJA,EAKoB2C,mBAAS,GAL7B,mBAKTM,EALS,KAKGC,EALH,OAMgBP,oBAAS,GANzB,mBAMTlC,EANS,KAMC0C,EAND,OAOcR,oBAAS,GAPvB,mBAOTJ,EAPS,KAOAa,EAPA,OAQUT,mBAAS,GARnB,mBAQTR,EARS,KAQFkB,EARE,OASkBV,oBAAS,GAT3B,mBASTW,EATS,KASEC,EATF,OAUkBZ,mBAASK,GAV3B,mBAUTjB,EAVS,KAUEyB,EAVF,OAWwBb,oBAAS,GAXjC,mBAWTc,EAXS,KAWKC,EAXL,OAY4Bf,mBAAS,IAZrC,oBAYTgB,GAZS,MAYOC,GAZP,SAakBjB,oBAAS,GAb3B,qBAaTkB,GAbS,MAaEC,GAbF,SAcgBnB,mBAAS,GAdzB,qBAcTF,GAdS,MAcCsB,GAdD,SAekBpB,mBAAS,GAf3B,qBAeTqB,GAfS,MAeEC,GAfF,MAkBhBC,qBAAU,WACJC,aAAaC,QAAQ,wBACvBL,GAAYI,aAAaC,QAAQ,0BAElC,IAGHF,qBAAU,WACR1B,OACC,CAACxC,IAGJkE,qBAAU,WACR,IAAMG,EAAYC,aAAY,WAExB7D,IAIK8B,GACHJ,EAAQM,KAAa0B,aAAaC,QAAQ,yBAC5CD,aAAaI,QAAQ,sBAAuBpC,GAKvCmB,GACPD,GAAS,SAACmB,GAAD,OAAUA,EAAO,QAE3B,KAGH,OAAO,kBAAMC,cAAcJ,MAC1B,CAACf,IAGJY,qBAAU,WACRQ,OACC,CAAC5B,IAEJoB,qBAAU,WACJT,GACFkB,OAED,CAAClB,IAGJ,IAAMjB,GAAQ,WACZuB,GAAYI,aAAaC,QAAQ,wBACjCjB,GAAY,GACZC,GAAW,GACXG,GAAa,GACbC,EAAaR,GACbE,EAAc,GACdG,EAAS,GACTuB,KACAF,KACAhB,GAAgB,IASZkB,GAAW,WAGf,IAFA,IAAMC,EAAU,GACVC,EAAc9E,EAAQA,EACrB6E,EAAQE,OAAS/B,GAAW,CACjC,IAAIgC,EAAYC,KAAKC,MAAMD,KAAKE,SAAWL,GACtCD,EAAQO,SAASJ,IACpBH,EAAQQ,KAAKL,GAGjBjC,EAAS8B,IAILH,GAAa,WACjB,GAAI5B,EAAMiC,SAAW/B,EAArB,CAEA,IADA,IAAIsC,EAAW,GACN3E,EAAI,EAAGA,EAAIX,EAAOW,IAAK,CAC9B2E,EAASD,KAAK,IACd,IAAK,IAAI3E,EAAI,EAAGA,EAAIV,EAAOU,IACzB4E,EAAS3E,GAAG0E,KAAK,CACflF,MAAOQ,EAAIX,EAAQU,EACnBC,EAAGA,EACHD,EAAGA,EACHH,SAAQuC,EAAMsC,SAASzE,EAAIX,EAAQU,GACnCR,WAAW,EACXE,eAAgB,EAChBQ,WAAW,IAIjBiC,EAAQ,GAAD,OAAKyC,IACZ5B,GAAgB,KAYZ6B,GAAU,SAAC5E,EAAGD,GAClB,IAAI4E,EAAWE,KAAKC,MAAMD,KAAKE,UAAUrE,IAErCA,EAAKV,GAAGD,GAAGE,WACb0E,EAAS3E,GAAGD,GAAGE,WAAY,EAC3B4C,GAAa,SAACgB,GAAD,OAAUA,EAAO,OACI,IAAzBnD,EAAKV,GAAGD,GAAGR,YACpBoF,EAAS3E,GAAGD,GAAGE,WAAY,EAC3B4C,GAAa,SAACgB,GAAD,OAAUA,EAAO,MAGhC3B,EAAQyC,IAIJ9E,GAAc,SAACG,EAAGD,GAOtB,GALK4C,GACHC,GAAa,KAIXlC,EAAKV,GAAGD,GAAGR,WAAamB,EAAKV,GAAGD,GAAGE,WAAaH,GAAY8B,GAAhE,CAIA,IAAI+C,EAAWE,KAAKC,MAAMD,KAAKE,UAAUrE,IACzCiE,EAAS3E,GAAGD,GAAGR,WAAY,EAC3B2C,EAAQyC,GAGRpC,GAAc,SAACsB,GAAD,OAAUA,EAAO,KAG3BmB,GAAchF,EAAGD,IAGa,IAA9BW,EAAKV,GAAGD,GAAGN,gBACbwF,GAAgBjF,EAAGD,KAIjBkF,GAAkB,SAACjF,EAAGD,GAI1B,IAHA,IAAMmF,EAAO,CAAClF,EAAI,EAAGA,EAAGA,EAAI,GACtBmF,EAAO,CAACpF,EAAI,EAAGA,EAAGA,EAAI,GAFI,WAIvBqF,GACP,IAL8B,eAKrBC,GACP,GACEH,EAAKE,GAAK,GACVD,EAAKE,GAAK,GACVH,EAAKE,GAAK/F,EAAQ,GAClB8F,EAAKE,GAAKhG,EAAQ,GACX,IAANgG,GAAiB,IAAND,EAEZ,iBAEC1E,EAAKwE,EAAKE,IAAID,EAAKE,IAAIpF,WACvBS,EAAKwE,EAAKE,IAAID,EAAKE,IAAI9F,YAExBgD,GAAc,SAACsB,GAAD,OAAUA,EAAO,KAC/BZ,IAAkB,SAACY,GAAD,4BAAcA,GAAd,CAAoB,CAACqB,EAAKE,GAAID,EAAKE,WAdhDA,EAAI,EAAGA,EAAI,EAAGA,IAAK,EAAnBA,IADFD,EAAI,EAAGA,EAAI,EAAGA,IAAM,EAApBA,GAmBTjC,IAAa,IAGfI,qBAAU,WACR,GAAKL,GAAL,CAGA,IAAIyB,EAAWE,KAAKC,MAAMD,KAAKE,UAAUrE,IACzC,YAAIsC,IAAgBsC,SAAQ,SAACC,GAC3BZ,EAASY,EAAE,IAAIA,EAAE,IAAIhG,WAAY,KAEnC2C,EAAQyC,GACR1B,GAAkB,IAClBE,IAAa,MACZ,CAACD,KAGJ,IAAM8B,GAAgB,SAAChF,EAAGD,GACxB,IAAIyF,EAAkBnG,EAAQA,EAAQgD,EAAY,EASlD,GARI3B,EAAKV,GAAGD,GAAGH,QACb4C,GAAY,GACZI,GAAa,IACJN,IAAekD,IACxB/C,GAAW,GACXG,GAAa,IAGXlC,EAAKV,GAAGD,GAAGH,OAAQ,OAAO,GAG1BoE,GAAuB,WAG3B,IAFA,IAAIW,EAAWE,KAAKC,MAAMD,KAAKE,UAAUrE,IACrC+E,EAAW,EACNzF,EAAI,EAAGA,EAAIX,EAAOW,IACzB,IAAK,IAAID,EAAI,EAAGA,EAAIV,EAAOU,IACzB0F,EAAWC,GAAmB1F,EAAGD,GACjC4E,EAAS3E,GAAGD,GAAGN,eAAiBgG,EAGpCvD,EAAQ,YAAIyC,KAGRe,GAAqB,SAAC1F,EAAGD,GAO7B,IANA,IAAI0F,EAAW,EAETP,EAAO,CAAClF,EAAI,EAAGA,EAAGA,EAAI,GACtBmF,EAAO,CAACpF,EAAI,EAAGA,EAAGA,EAAI,GAGnBqF,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,GAAI3E,EAAKV,GAAGD,GAAGE,UAAW,OAGxBiF,EAAKE,GAAK,GACVD,EAAKE,GAAK,GACVH,EAAKE,GAAK/F,EAAQ,GAClB8F,EAAKE,GAAKhG,EAAQ,GACX,IAANgG,GAAiB,IAAND,GAGH1E,EAAKwE,EAAKE,IAAID,EAAKE,IAAIzF,QAChC6F,IAIN,OAAOA,GAmBT,OACE,oCACE,kBAACvG,EAAD,KACE,kBAACH,EAAD,KACE,kBAAC,EAAD,CAAOiC,YA1MK,SAAC2E,GACnB1D,EAAS0D,EAAEC,OAAO1E,QAyMqB7B,MAAOA,IACxC,kBAAC,EAAD,CAAO+B,UAAWA,IAClB,kBAAC,EAAD,CAAOI,MAAOA,KAEhB,kBAAC,EAAD,CACEd,KAAMA,EACNrB,MAAOA,EACP8C,MAAOA,EACPtC,YAAaA,GACbC,SAAUA,EACVI,WA5KW,SAACyF,EAAG3F,EAAGD,GACxB4F,EAAEE,UACe,IAAbF,EAAEG,SACNH,EAAEI,iBACFnB,GAAQ5E,EAAGD,KAyKLI,WA9BW,WACjB,IAAI6F,GAAO,IAAIC,MAAOC,UACtB5C,GAAa0C,IA6BP5F,SAzBS,SAACJ,EAAGD,IACJ,IAAIkG,MAAOC,UAAY7C,GACvB,IACbxD,GAAYG,EAAGD,GAEf6E,GAAQ5E,EAAGD,MAsBT,kBAAC,EAAD,CAAUD,SAAUA,EAAU8B,QAASA,EAASC,MAAOA,KACvD,kBAAC9C,EAAD,KACE,kBAAC,EAAD,CAAU+C,SAAUA,SCrT9BqE,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.07943957.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const StyleMenu = styled.div`\n  font-family: Arial, Helvetica, sans-serif;\n  display: flex;\n  justify-content: space-between;\n  background-color: green;\n  height: 60px;\n  padding: 0 50px;\n\n  select {\n    height: 35px;\n    width: 80px;\n    border-radius: 5px;\n    align-self: center;\n  }\n\n  p {\n    font-size: 1rem;\n    color: white;\n  }\n\n  .best-time {\n    margin: auto;\n    text-align: center;\n    align-self: center;\n\n    span {\n      font-size: .75rem;\n    }\n  }\n`;\n","import styled from \"styled-components\";\n\nexport const StyleBody = styled.div`\n  width: 500px;\n\n  @media (max-width: 700px) {\n    width: 400px;\n  }\n`;\n","import styled from \"styled-components\";\n\nexport const StyleGame = styled.div`\n    display: grid;\n    grid-template-columns: repeat(${props => props.level}, 1fr);\n    grid-template-rows: repeat(${props => props.level}, 1fr);\n    height: 500px;\n    align-self: center;\n\n    @media (max-width: 700px) {\n        height: 400px;\n    }\n`;\n","import styled from \"styled-components\";\n\nexport const StyleCell = styled.div`\n  display: flex;\n  justify-content: center;\n  outline: none;\n  background-color: ${(props) =>\n    props.isClicked && props.index % 2 === 0\n      ? \"#E5C29F\"\n      : props.isClicked && props.index % 2 !== 0\n      ? \"#D7B898\"\n      : props.index % 2 === 0\n      ? \"#A7D947\"\n      : \"#8ECC39\"};\n  color : ${(props) =>\n    props.neighbourBombs === 1\n      ? \"blue\"\n      : props.neighbourBombs === 2\n      ? \"green\"\n      : props.neighbourBombs === 3 \n      ? 'red'\n      : props.neighbourBombs === 4\n      ? 'purple' \n      : props.neighbourBombs === 5\n      ? 'orange'\n      : props.neighbourBombs === 6\n      ? 'black'\n      : 'yellow'};\n  cursor: pointer;\n  div {\n    font-family: Arial, Helvetica, sans-serif;\n    align-self: center;\n    font-size: ${(props) =>\n      props.level === \"21\"\n        ? `.7rem`\n        : props.level === \"15\"\n        ? \"1rem\"\n        : \"1.2rem\"};\n  }\n`;\n","import React from \"react\";\n\nimport { isBrowser } from 'react-device-detect';\n\nimport { StyleCell } from \"./Styles/StyleCell\";\n\n\nconst Cell = ({\n  index,\n  isBomb,\n  level,\n  isClicked,\n  singleClick,\n  gameOver,\n  x,\n  y,\n  neighbourBombs,\n  rightClick,\n  isFlagged,\n  touchStart, \n  touchEnd, \n}) => {\n  return (\n    <StyleCell\n      level={level}\n      isClicked={isClicked}\n      onTouchStart={touchStart}\n      onTouchEnd={() => touchEnd(y, x)}\n      // onContextMenu={(e) => isBrowser ? rightClick(e, y, x) : ''}\n      index={index}\n      onClick={() => singleClick(y, x)}\n      neighbourBombs={neighbourBombs}\n    >\n      {console.log(\"cell load\")}\n      <div>\n        {isBomb && gameOver\n          ? \"💣\"\n          : isFlagged\n          ? \"🚩\"\n          : neighbourBombs !== 0 && isClicked\n          ? neighbourBombs\n          : \"\"}\n      </div>\n    </StyleCell>\n  );\n};\n\nexport default React.memo(Cell);\n","import React from \"react\";\n\nimport { StyleGame } from \"./Styles/StyleGame\";\n\nimport Cell from \"./Cell\";\n\nconst Game = ({ grid, level, singleClick, gameOver, rightClick, touchStart, touchEnd }) => {\n  return (\n    <StyleGame level={level}>\n    {/* { console.log('load game') } */}\n      {grid.map((row) =>\n        row.map((col) => (\n          <Cell\n            key={col.index}\n            index={col.index}\n            isBomb={col.isBomb}\n            isFlagged={col.isFlagged}\n            neighbourBombs={col.neighbourBombs}\n            x={col.x}\n            y={col.y}\n            isClicked={col.isClicked}\n            level={level}\n            singleClick={singleClick}\n            gameOver={gameOver}\n            rightClick={rightClick}\n            touchStart={touchStart}\n            touchEnd={touchEnd}\n          />\n        ))\n      )}\n    </StyleGame>\n  );\n};\n\nexport default React.memo(Game);\n","import React from 'react';\n\nconst Level = ({ level, levelChange }) => {\n  return (\n    <>\n      <select onChange={levelChange} value={level}>\n        <option value=\"7\">Easy</option>\n        <option value=\"11\">Medium</option>\n        <option value=\"15\">Hard</option>\n      </select>\n    </>\n  );\n};\n\nexport default Level;","import React from \"react\";\n\nconst Flags = ({ flagTotal }) => {\n  return (\n    <p>\n      <span role=\"img\" aria-label=\"flag\">🚩</span>\n      {flagTotal}\n    </p>\n  );\n};\n\nexport default Flags;\n","import React from \"react\";\n\nconst Timer = ({ timer }) => {\n  return (\n    <p>\n      <span className=\"emoji\" role=\"img\" aria-label=\"timer\">\n        ⏱️ </span>\n      {timer === 0\n        ? \"000\"\n        : timer < 10\n        ? \"00\" + timer + 's'\n        : timer < 100\n        ? \"0\" + timer + 's'\n        : timer}\n    </p>\n  );\n};\n\nexport default Timer;\n","import styled from \"styled-components\";\n\nexport const StyleGameOver = styled.div`\n    font-family: Arial, Helvetica, sans-serif;\n    background-color: rgba(0,0,0,.6);\n    color: white;\n    font-size: 2.5rem;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    padding: 40px 20px;\n    border-radius: 10px;\n    display: flex;\n    flex-direction: column;\n    z-index: 1;\n    transition: 1s 1s ease;\n    \n    h2 {\n        text-align: center;\n        font-size: 2rem;\n    }\n\n    button {\n        margin: .5em 0;\n        align-self: center;\n        width: 100px;\n        padding: .5em 1em;\n        cursor: pointer;\n    }\n\n`;\n","import React from \"react\";\n\nimport { StyleGameOver } from \"./Styles/StyleGameOver\";\n\nconst GameOver = ({ gameOver, gameWon, reset }) => {\n  return (\n    <>\n      {gameOver ? (\n        <StyleGameOver>\n          <h2>Game Over</h2>\n          <button onClick={reset}>Play Again</button>\n        </StyleGameOver>\n      ) : \n        gameWon ? (\n          <StyleGameOver>\n            <h2>You've Won</h2>\n            <button onClick={reset}>Play Again</button>\n          </StyleGameOver>\n        ):\n        \"\"\n      }\n    </>\n  );\n};\n\nexport default GameOver;\n","import React from \"react\";\n\n// import react device detection\nimport { BrowserView, MobileView } from 'react-device-detect';\n\nconst BestTime = ({ bestTime }) => (\n  <p className=\"best-time\">\n    {console.log(\"best time load\")}\n    <span aria-label=\"timer\" role=\"img\">\n      ⏱️{\" \"}\n    </span>\n    Best Time:\n    {bestTime === 0 || bestTime === null\n      ? ` ---`\n      : bestTime < 10\n      ? ` 00${bestTime}s`\n      : bestTime < 100\n      ? ` 0${bestTime}s`\n      : ` ${bestTime}`}\n    <BrowserView>\n      <span>Right click to insert a flag</span>\n    </BrowserView>\n    <MobileView>\n      <span>Long press to insert a flag</span>\n    </MobileView>\n  </p>\n);\n\nexport default React.memo(BestTime);\n","import React, { useState, useEffect } from \"react\";\n\n// import device detection\n\nimport { isBrowser, isMobile } from 'react-device-detect';\n\n// import styling\nimport { StyleMenu } from \"./Components/Styles/StyleMenu\";\nimport { StyleBody } from \"./Components/Styles/StyleBody\";\n\n// import Components\nimport Game from \"./Components/Game\";\nimport Level from \"./Components/Level\";\nimport Flags from \"./Components/Flags\";\nimport Timer from \"./Components/Timer\";\nimport GameOver from \"./Components/GameOver\";\nimport BestTime from \"./Components/BestTime\";\n\nconst App = () => {\n  const [level, setLevel] = useState(9);\n  const [grid, setGrid] = useState([]);\n  const [bombs, setBombs] = useState([]);\n  let bombCount = level * 2;\n  const [clickCount, setClickCount] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  const [gameWon, setGameWon] = useState(false);\n  const [timer, setTimer] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [flagTotal, setFlagTotal] = useState(bombCount);\n  const [isBombsAdded, setIsBombsAdded] = useState(false);\n  const [revealMultiple, setRevealMultiple] = useState([]);\n  const [showCells, setShowCells] = useState(false);\n  const [bestTime, setBestTime] = useState(0);\n  const [longPress, setLongPress] = useState(0);\n\n  // retreive best time on page load\n  useEffect(() => {\n    if (localStorage.getItem(\"minesweeperBestTime\")) {\n      setBestTime(localStorage.getItem(\"minesweeperBestTime\"));\n    }\n  }, []);\n\n  // reset game when switching levels\n  useEffect(() => {\n    reset();\n  }, [level]);\n\n  // timer starts/ends when game starts/ends\n  useEffect(() => {\n    const countDown = setInterval(() => {\n      // dont increment timer when player loses\n      if (gameOver) {\n        return;\n      }\n      // if player won don't increment timer and check best time\n      else if (gameWon) {\n        if (timer < bestTime || !localStorage.getItem(\"minesweeperBestTime\")) {\n          localStorage.setItem(\"minesweeperBestTime\", timer);\n        }\n        return;\n      }\n      // increment second if game is in play\n      else if (isPlaying) {\n        setTimer((prev) => prev + 1);\n      }\n    }, 1000);\n\n    // clean up timer when restarting game\n    return () => clearInterval(countDown);\n  }, [isPlaying]);\n\n  // update grid once bombs have been re-calculated\n  useEffect(() => {\n    updateGrid();\n  }, [bombs]);\n\n  useEffect(() => {\n    if (isBombsAdded) {\n      addNeighourBombCount();\n    }\n  }, [isBombsAdded]);\n\n  // funct that resets everything\n  const reset = () => {\n    setBestTime(localStorage.getItem(\"minesweeperBestTime\"));\n    setGameOver(false);\n    setGameWon(false);\n    setIsPlaying(false);\n    setFlagTotal(bombCount);\n    setClickCount(0);\n    setTimer(0);\n    calcBomb();\n    updateGrid();\n    setIsBombsAdded(false);\n  };\n\n  // set level state\n  const levelChange = (e) => {\n    setLevel(e.target.value);\n  };\n\n  // randomly generate x number of bombs depending on level and add to bomb array\n  const calcBomb = () => {\n    const bombArr = [];\n    const totalBlocks = level * level;\n    while (bombArr.length < bombCount) {\n      let randIndex = Math.floor(Math.random() * totalBlocks);\n      if (!bombArr.includes(randIndex)) {\n        bombArr.push(randIndex);\n      }\n    }\n    setBombs(bombArr);\n  };\n\n  // update grid array and cell object\n  const updateGrid = () => {\n    if (bombs.length !== bombCount) return;\n    let gridCopy = [];\n    for (let y = 0; y < level; y++) {\n      gridCopy.push([]);\n      for (let x = 0; x < level; x++) {\n        gridCopy[y].push({\n          index: y * level + x,\n          y: y,\n          x: x,\n          isBomb: bombs.includes(y * level + x) ? true : false,\n          isClicked: false,\n          neighbourBombs: 0,\n          isFlagged: false,\n        });\n      }\n    }\n    setGrid([...gridCopy]);\n    setIsBombsAdded(true);\n  };\n\n  // add and remove flag from grid object\n  const rightClick = (e, y, x) => {\n    e.persist();\n    if (e.button !== 2) return;\n    e.preventDefault();\n    addFlag(y, x);\n  };\n\n  // adds flag to a cell\n  const addFlag = (y, x) => {\n    let gridCopy = JSON.parse(JSON.stringify(grid));\n\n    if (grid[y][x].isFlagged) {\n      gridCopy[y][x].isFlagged = false;\n      setFlagTotal((prev) => prev + 1);\n    } else if (grid[y][x].isClicked === false) {\n      gridCopy[y][x].isFlagged = true;\n      setFlagTotal((prev) => prev - 1);\n    }\n\n    setGrid(gridCopy);\n  };\n\n  // runs when player clicks on a cell\n  const singleClick = (y, x) => {\n    // on first turn set playing to true (to start timer)\n    if (!isPlaying) {\n      setIsPlaying(true);\n    }\n\n    // return if cell is already clicked or flagged or game over or game won\n    if (grid[y][x].isClicked || grid[y][x].isFlagged || gameOver || gameWon)\n      return;\n\n    // set cell's click state to true\n    let gridCopy = JSON.parse(JSON.stringify(grid));\n    gridCopy[y][x].isClicked = true;\n    setGrid(gridCopy);\n\n    // increment click count;\n    setClickCount((prev) => prev + 1);\n\n    // check if bomb was activated\n    if (checkGameOver(y, x)) return;\n\n    // if cell has no neighbouring bombs display multiple cells\n    if (grid[y][x].neighbourBombs === 0) {\n      displayMultiple(y, x);\n    }\n  };\n\n  const displayMultiple = (y, x) => {\n    const yArr = [y - 1, y, y + 1];\n    const xArr = [x - 1, x, x + 1];\n\n    for (let j = 0; j < 3; j++) {\n      for (let i = 0; i < 3; i++) {\n        if (\n          yArr[j] < 0 ||\n          xArr[i] < 0 ||\n          yArr[j] > level - 1 ||\n          xArr[i] > level - 1 ||\n          (i === 1 && j === 1)\n        ) {\n          continue;\n        } else if (\n          !grid[yArr[j]][xArr[i]].isFlagged &&\n          !grid[yArr[j]][xArr[i]].isClicked\n        ) {\n          setClickCount((prev) => prev + 1);\n          setRevealMultiple((prev) => [...prev, [yArr[j], xArr[i]]]);\n        }\n      }\n    }\n    setShowCells(true);\n  };\n\n  useEffect(() => {\n    if (!showCells) return;\n\n    // set neighbouring cells with no bombs to clicked\n    let gridCopy = JSON.parse(JSON.stringify(grid));\n    [...revealMultiple].forEach((a) => {\n      gridCopy[a[0]][a[1]].isClicked = true;\n    });\n    setGrid(gridCopy);\n    setRevealMultiple([]);\n    setShowCells(false);\n  }, [showCells]);\n\n  // check if player has won or lost\n  const checkGameOver = (y, x) => {\n    let notClickedCount = level * level - bombCount - 1;\n    if (grid[y][x].isBomb) {\n      setGameOver(true);\n      setIsPlaying(false);\n    } else if (clickCount === notClickedCount) {\n      setGameWon(true);\n      setIsPlaying(false);\n    }\n\n    if (grid[y][x].isBomb) return true;\n  };\n\n  const addNeighourBombCount = () => {\n    let gridCopy = JSON.parse(JSON.stringify(grid));\n    let numBombs = 0;\n    for (let y = 0; y < level; y++) {\n      for (let x = 0; x < level; x++) {\n        numBombs = calcNeighbourBombs(y, x);\n        gridCopy[y][x].neighbourBombs = numBombs;\n      }\n    }\n    setGrid([...gridCopy]);\n  };\n\n  const calcNeighbourBombs = (y, x) => {\n    let numBombs = 0;\n    // arrays to determine x and y values above and below current cell\n    const yArr = [y - 1, y, y + 1];\n    const xArr = [x - 1, x, x + 1];\n\n    // loop through neighbouring cells and count how many contains bombs\n    for (let j = 0; j < 3; j++) {\n      for (let i = 0; i < 3; i++) {\n        if (grid[y][x].isFlagged) return;\n\n        if (\n          yArr[j] < 0 ||\n          xArr[i] < 0 ||\n          yArr[j] > level - 1 ||\n          xArr[i] > level - 1 ||\n          (i === 1 && j === 1)\n        ) {\n          continue;\n        } else if (grid[yArr[j]][xArr[i]].isBomb) {\n          numBombs++;\n        }\n      }\n    }\n    return numBombs;\n  };\n\n  // record time when user presses on screen\n  const touchStart = () => {\n    let time = new Date().getTime();\n    setLongPress(time)\n  };\n\n  // add flag if its a long press else run single click function\n  const touchEnd = (y, x) => {\n    let timeDiff = new Date().getTime() - longPress;\n    if (timeDiff < 400) {\n      singleClick(y, x)\n    } else {\n      addFlag(y, x)\n    }\n  };\n\n  return (\n    <>\n      <StyleBody>\n        <StyleMenu>\n          <Level levelChange={levelChange} level={level} />\n          <Flags flagTotal={flagTotal} />\n          <Timer timer={timer} />\n        </StyleMenu>\n        <Game\n          grid={grid}\n          level={level}\n          bombs={bombs}\n          singleClick={singleClick}\n          gameOver={gameOver}\n          rightClick={rightClick}\n          touchStart={touchStart}\n          touchEnd={touchEnd}\n        />\n        <GameOver gameOver={gameOver} gameWon={gameWon} reset={reset} />\n        <StyleMenu>\n          <BestTime bestTime={bestTime} />\n        </StyleMenu>\n      </StyleBody>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}